{"ast":null,"code":"var _jsxFileName = \"E:\\\\REACT\\\\DragDrop\\\\src\\\\AddMyTrello\\\\Modal\\\\MyModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./mymodal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addBoardBtnolors = [\"primary\", \"secondary\", \"success\", \"info\", \"warning\", \"danger\", \"light\"];\n\nconst MyModal = props => {\n  _s();\n\n  const [txtInput, setTxtInput] = useState(\"Введите название доски\");\n\n  const handlerColorBtn = (e, item) => {\n    props.greatNewBoard(e, item);\n    document.querySelector(\"#inputDefault\").value = '';\n    document.querySelector(\"#inputDefault\").placeholder = 'Введите название доски';\n  };\n\n  const handlerClearInput = () => {\n    props.setActiveModal(false);\n    document.querySelector(\"#inputDefault\").value = '';\n    document.querySelector(\"#inputDefault\").placeholder = 'Введите название доски';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.activeModal ? \"mymodal \" : \"mymodal close\",\n    onClick: () => props.setActiveModal(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mymodal-body\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger btnModalClose\",\n        onClick: handlerClearInput,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0434\\u043E\\u0441\\u043A\\u0438\",\n          id: \"inputDefault\",\n          onFocus: event => event.target.placeholder = \"\",\n          onChange: event => {\n            props.setNewNameBoard(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), addBoardBtnolors.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: `btn btn-${item}`,\n          // onClick={props.addBoard}\n          // onClick={props.addBoard}\n          onClick: e => {\n            handlerColorBtn(e, item);\n          },\n          children: item.charAt(0).toUpperCase() + item.slice(1)\n        }, index + 'btnnewboard', false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger \",\n        onClick: handlerClearInput,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyModal, \"cfFkuC0bRP3vCrJ3yMK2ddIQOnQ=\");\n\n_c = MyModal;\nexport default MyModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyModal\");","map":{"version":3,"names":["React","useState","addBoardBtnolors","MyModal","props","txtInput","setTxtInput","handlerColorBtn","e","item","greatNewBoard","document","querySelector","value","placeholder","handlerClearInput","setActiveModal","activeModal","stopPropagation","event","target","setNewNameBoard","map","index","charAt","toUpperCase","slice"],"sources":["E:/REACT/DragDrop/src/AddMyTrello/Modal/MyModal.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./mymodal.css\";\r\n\r\n\r\nconst addBoardBtnolors = [\"primary\", \"secondary\", \"success\", \"info\", \"warning\", \"danger\", \"light\"]\r\n\r\n\r\nconst MyModal = (props) => {\r\n\r\n  const [txtInput, setTxtInput] = useState(\"Введите название доски\")\r\n\r\n  const handlerColorBtn = (e, item) => {\r\n    props.greatNewBoard(e, item)\r\n    document.querySelector(\"#inputDefault\").value = ''\r\n    document.querySelector(\"#inputDefault\").placeholder = 'Введите название доски'\r\n\r\n  }\r\n\r\n  const handlerClearInput = () => {\r\n    props.setActiveModal(false)\r\n    document.querySelector(\"#inputDefault\").value = ''\r\n    document.querySelector(\"#inputDefault\").placeholder = 'Введите название доски'\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={props.activeModal ? \"mymodal \" : \"mymodal close\"} onClick={() => props.setActiveModal(false)}>\r\n\r\n      {/* остановить всплытие события выше этого блока */}\r\n      <div className=\"mymodal-body\" onClick={(e) => e.stopPropagation()}>\r\n\r\n        <button type=\"button\" className=\"btn btn-danger btnModalClose\" onClick={handlerClearInput}>x</button>\r\n        <div>\r\n\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"Введите название доски\"\r\n            id=\"inputDefault\" onFocus={(event) => (event.target.placeholder = \"\")}\r\n            onChange={(event) => {\r\n              props.setNewNameBoard(event.target.value)\r\n            }}\r\n          ></input>\r\n\r\n          {addBoardBtnolors.map((item, index) =>\r\n            <button type=\"button\" className={`btn btn-${item}`} key={index + 'btnnewboard'}\r\n              // onClick={props.addBoard}\r\n              // onClick={props.addBoard}\r\n              onClick={(e) => { handlerColorBtn(e, item) }}\r\n            >{item.charAt(0).toUpperCase() + item.slice(1)}</button>)}\r\n        </div>\r\n\r\n        <button type=\"button\" className=\"btn btn-danger \"\r\n          onClick={handlerClearInput}>Cancel</button>\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default MyModal\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,eAAP;;AAGA,MAAMC,gBAAgB,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,SAA5C,EAAuD,QAAvD,EAAiE,OAAjE,CAAzB;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EAAA;;EAEzB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,wBAAD,CAAxC;;EAEA,MAAMM,eAAe,GAAG,CAACC,CAAD,EAAIC,IAAJ,KAAa;IACnCL,KAAK,CAACM,aAAN,CAAoBF,CAApB,EAAuBC,IAAvB;IACAE,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCC,KAAxC,GAAgD,EAAhD;IACAF,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCE,WAAxC,GAAsD,wBAAtD;EAED,CALD;;EAOA,MAAMC,iBAAiB,GAAG,MAAM;IAC9BX,KAAK,CAACY,cAAN,CAAqB,KAArB;IACAL,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCC,KAAxC,GAAgD,EAAhD;IACAF,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCE,WAAxC,GAAsD,wBAAtD;EAED,CALD;;EAUA,oBACE;IAAK,SAAS,EAAEV,KAAK,CAACa,WAAN,GAAoB,UAApB,GAAiC,eAAjD;IAAkE,OAAO,EAAE,MAAMb,KAAK,CAACY,cAAN,CAAqB,KAArB,CAAjF;IAAA,uBAGE;MAAK,SAAS,EAAC,cAAf;MAA8B,OAAO,EAAGR,CAAD,IAAOA,CAAC,CAACU,eAAF,EAA9C;MAAA,wBAEE;QAAQ,IAAI,EAAC,QAAb;QAAsB,SAAS,EAAC,8BAAhC;QAA+D,OAAO,EAAEH,iBAAxE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,wBAEE;UAAO,IAAI,EAAC,MAAZ;UAAmB,SAAS,EAAC,cAA7B;UAA4C,WAAW,EAAC,4HAAxD;UACE,EAAE,EAAC,cADL;UACoB,OAAO,EAAGI,KAAD,IAAYA,KAAK,CAACC,MAAN,CAAaN,WAAb,GAA2B,EADpE;UAEE,QAAQ,EAAGK,KAAD,IAAW;YACnBf,KAAK,CAACiB,eAAN,CAAsBF,KAAK,CAACC,MAAN,CAAaP,KAAnC;UACD;QAJH;UAAA;UAAA;UAAA;QAAA,QAFF,EASGX,gBAAgB,CAACoB,GAAjB,CAAqB,CAACb,IAAD,EAAOc,KAAP,kBACpB;UAAQ,IAAI,EAAC,QAAb;UAAsB,SAAS,EAAG,WAAUd,IAAK,EAAjD;UACE;UACA;UACA,OAAO,EAAGD,CAAD,IAAO;YAAED,eAAe,CAACC,CAAD,EAAIC,IAAJ,CAAf;UAA0B,CAH9C;UAAA,UAIEA,IAAI,CAACe,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BhB,IAAI,CAACiB,KAAL,CAAW,CAAX;QAJjC,GAAyDH,KAAK,GAAG,aAAjE;UAAA;UAAA;UAAA;QAAA,QADD,CATH;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF,eAoBE;QAAQ,IAAI,EAAC,QAAb;QAAsB,SAAS,EAAC,iBAAhC;QACE,OAAO,EAAER,iBADX;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QApBF;IAAA;MAAA;MAAA;MAAA;IAAA;EAHF;IAAA;IAAA;IAAA;EAAA,QADF;AA8BD,CAnDD;;GAAMZ,O;;KAAAA,O;AAqDN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}